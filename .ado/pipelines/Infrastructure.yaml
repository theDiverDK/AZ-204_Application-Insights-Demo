trigger: none
#  branches:
#    include:
#      - main
#  paths:
#    include:
#      - .ado/*
#      - .azure/*

pool:
  name: 'Minecraft server 2'
  vmImage: 'ubuntu-latest'

variables:
  - group: 'Production Variables'

pr: none

stages:
  - stage: Deploy_Infrastructure_stage
    displayName: 'Deploy Infrastructure'

    jobs:
      - job: Deploy_Infrastructure_jobs

        steps:
          - task: AzureCLI@2
            displayName: Create or update the resource group
            inputs:
              azureSubscription: '$(azureServiceConnectionName)'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az group create --location $(location) --name $(resourceGroupName)

          - task: AzureResourceManagerTemplateDeployment@3.243.1
            displayName: 'Deploy all infrastructure'
            inputs:
              connectedServiceName: $(azureServiceConnectionName)
              location: $(location)
              resourceGroupName: $(resourceGroupName)
              deploymentName: infrastructure-$(Build.BuildId)
              csmFile: .azure/bicep/infrastructure.bicep
              overrideParameters: 
                -appName $(appName)
                -env $(environment)
                -pipelineSpObjectId $(serviceConnectionObjectId)
              deploymentOutputs: infrastructureAsCodeOutputs

          - task: AzureCLI@2
            displayName: 'Show failed deployment operations (if any)'
            condition: failed()
            inputs:
              azureSubscription: '$(azureServiceConnectionName)'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Fetching failed operations for deployment infrastructure-$(Build.BuildId) in RG $(resourceGroupName)"
                az deployment group show -g $(resourceGroupName) -n infrastructure-$(Build.BuildId) -o jsonc || true
                Write-Host "--- Failed operations:"
                $failed = az deployment group operation list -g $(resourceGroupName) -n infrastructure-$(Build.BuildId) --query "[?properties.provisioningState=='Failed']" -o json | ConvertFrom-Json
                if (-not $failed) { Write-Host "No failed operations found"; exit 0 }
                $failed | ForEach-Object {
                  Write-Host ("opId: {0}" -f $_.operationId)
                  Write-Host ("resource: {0}" -f $_.properties.targetResource.id)
                  Write-Host ("statusCode: {0}" -f $_.properties.statusCode)
                  $err = $_.properties.statusMessage.error
                  if ($err) {
                    Write-Host ("code: {0}" -f $err.code)
                    Write-Host ("message: {0}" -f $err.message)
                    if ($err.details) { $err.details | ForEach-Object { Write-Host (" detail: {0}: {1}" -f $_.code, $_.message) } }
                  } else {
                    Write-Host ("statusMessage: {0}" -f ($_.properties.statusMessage | ConvertTo-Json -Depth 10))
                  }
                  Write-Host "---"
                }

          - powershell: |
              echo "Extracting output variables from infrastructure deployment..."

              # Convert JSON-like string to a PowerShell object
              $variables = ConvertFrom-Json '$(infrastructureAsCodeOutputs)'

              # Access specific properties
              $cosmosDBEndpoint = $variables.cosmosDBEndpoint.value
              $cosmosDBKey = $variables.cosmosDBKey.value
              $cosmosDBContainerName = $variables.cosmosDBContainerName.value
              $cosmosDBDatabaseName = $variables.cosmosDBDatabaseName.value
              $storageAccountConnectionString = $variables.storageAccountConnectionString.value

              echo "##vso[task.setvariable variable=cosmosDBEndpoint;isOutput=true]$cosmosDBEndpoint"
              echo "##vso[task.setvariable variable=cosmosDBKey;isOutput=true]$cosmosDBKey"
              echo "##vso[task.setvariable variable=cosmosDBContainerName;isOutput=true]$cosmosDBContainerName"
              echo "##vso[task.setvariable variable=cosmosDBDatabaseName;isOutput=true]$cosmosDBDatabaseName"

              echo "##vso[task.setvariable variable=storageAccountConnectionString;isOutput=true]$storageAccountConnectionString"

  - stage:
    displayName: 'Seed CosmosDB and StorageAccount'
    dependsOn: 'Deploy_Infrastructure_stage'
    variables:
      keyVaultName: '$(appName)-$(environment)-kv'
      cosmosDBDatabaseName: '$(appName)-$(environment)-database'
      cosmosDBContainerName: '$(appName)-$(environment)-container'

    jobs:
      - job:
        steps:
          - task: AzureKeyVault@2
            displayName: 'Fetch secrets from Key Vault'
            inputs:
              azureSubscription: '$(azureServiceConnectionName)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: 'CosmosConnectionString,StorageConnectionString'
          - script: |
              # Create and activate virtual environment for CosmosDB
              python3 -m venv venv_cosmosdb
              source venv_cosmosdb/bin/activate
              pip install --upgrade pip
              pip install -r .ado/pipelines/python/CosmosDB/requirements.txt

              python .ado/pipelines/python/CosmosDB/seed.py \
                --connectionstring "$(CosmosConnectionString)" \
                --database "$(cosmosDBDatabaseName)" \
                --container "$(cosmosDBContainerName)" \
                --configdata .ado/pipelines/python/CosmosDB/ConfigData/
              # Cleanup virtual environment
              deactivate
              rm -rf venv_cosmosdb
            displayName: 'Seed CosmosDB using virtual environment'

          - script: |
              # Create and activate virtual environment for StorageAccount
              python3 -m venv venv_storage
              source venv_storage/bin/activate
              pip install --upgrade pip
              pip install -r .ado/pipelines/python/StorageAccount/requirements.txt
              python .ado/pipelines/python/StorageAccount/seed.py \
                --connectionstring "$(StorageConnectionString)" \
                --configdata ".ado/pipelines/python/StorageAccount/ConfigData/"
          
              # Cleanup virtual environment
              deactivate
              rm -rf venv_storage
            displayName: 'Seed StorageAccount using virtual environment'

         
  - stage: 
    displayName: 'Build/Depoy WebApplication1 webapp'
    # dependsOn: 'Deploy_Infrastructure_stage'

    variables:
      webAppName: WebApplication1
      applicationName: az204

    jobs:
      - job:
        steps:
          - template: build-deploy-webapp-template.yaml
            parameters:
              webAppName: $(webAppName)
              appServiceName: $(applicationName)-$(environment)-app
              appType: webApp
              azureServiceConnectionName: $(azureServiceConnectionName)

  - stage: 
    displayName: 'Build/Deploy Application_Insight webapp'
    # dependsOn: 'Deploy_Infrastructure_stage'

    variables:
      webAppName: Application_Insight
      applicationName: appInsight

    jobs:
      - job:
        steps:
          - template: build-deploy-webapp-template.yaml
            parameters:
              webAppName: $(webAppName)
              appServiceName: $(applicationName)-$(environment)-app
              appType: webApp
              azureServiceConnectionName: $(azureServiceConnectionName)
